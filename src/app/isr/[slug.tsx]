"use client"
import { GetStaticPaths, GetStaticProps } from 'next';
import { useRouter } from 'next/router';

interface BlogPost {
  id: number;
  title: string;
  body: string;
}

export default function BlogPostPage({ post }: { post: BlogPost }) {
  const router = useRouter();

  // Show loading state if fallback is being rendered
  if (router.isFallback) return <p>Loading...</p>;

  return (
    <main className="max-w-2xl mx-auto p-6">
      <h1 className="text-3xl font-bold">{post.title}</h1>
      <p className="mt-4 text-gray-700">{post.body}</p>
    </main>
  );
}

// 1. Define static paths at build time
export const getStaticPaths: GetStaticPaths = async () => {
  const res = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=5');
  const posts: BlogPost[] = await res.json();

  const paths = posts.map((post) => ({
    params: { slug: post.id.toString() },
  }));

  return {
    paths,
    fallback: true, // Allow ISR for paths not generated at build
  };
};

// 2. Fetch data & enable ISR with revalidate
export const getStaticProps: GetStaticProps = async ({ params }) => {
  const res = await fetch(`https://jsonplaceholder.typicode.com/posts/${params?.slug}`);
  
  if (!res.ok) {
    return { notFound: true };
  }

  const post: BlogPost = await res.json();

  return {
    props: { post },
    revalidate: 10, // Regenerate page every 10 seconds if there are new requests
  };
};
